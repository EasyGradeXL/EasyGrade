#************************************************************************************************************************************************************************************
# Copyright (c) 2021 Tony L. Jones
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”),
# to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# The sound files were downloaded from https://www.fesliyanstudios.com
#********************************************************************************************************************************************************************************

from __future__ import absolute_import
from __future__ import division
import sys
import threading
from typing import List
from google.cloud import speech
import google.api_core
from six.moves import queue

class SpeechToText(object):
    """
        Sends the audio chunks to the Google speech-to-text API and sends the recognized text to Excel

        Methods
        _______
            pause()
                Pauses speech recognition
            resume()
                Resumes speech recognition
            runSpeechRecognition()
                Must be called periodically to run the speech recognition engine
    """
    def __init__(self, audioEngine: object, languageCode: str, commonPhrases: list, replacementDictionary: dict, callExcelMacro: callable, sampleRate: int, exceptionHook: callable):
        """
        Parameters
        ----------
         audioEngine : object
            Audio engine object that generates the chunks of audio data
         languageCode : str
            Recognition language code which will be sent to Google API
         commonPhrases : list
            A list of common phrases from the "Settings" sheet of the workbook
         replacementDictionary : dict
            A dictionary of word replacements from the "Settings" sheet of the workbook
         callExcelMacro :
            A handle to the method that calls nan Excel VBA macro
         exceptionHook :
            Method to call when an exception has occurred
        """

        self.__audioEngine = audioEngine
        self.__languageCode = languageCode
        self.__commonPhrases = commonPhrases
        self.__replacementDictionary = replacementDictionary
        self.__callExcelMacro = callExcelMacro
        self.__sampleRate = sampleRate
        self.__exceptionHook = exceptionHook
        self.__thread = None                        # Thread in which speech recognition runs
        self.__phraseQueue = queue.Queue()          # A queue to hold the phrases as they are generated by the Google speech-to-text API
        self.__googleAPIClient = None               # Handle to the Google API client
        self.__streamingConfig = None               # Stream configuration object
        self.__secondsBilled = 0                    # Seconds billed by the Google API
        self.__recognitionActive = False            # Set to true when running speech recognition

        # List of common phrases from the settings module
        speechContext = speech.SpeechContext(phrases=self.__commonPhrases)
        # Instantiate the Google API client
        try:
            self.__googleAPIClient = speech.SpeechClient()
        except:
            self.__callExcelMacro("pythonError", 'GoogleCredentialsError.')
        try:
            # Set up the speech-to-text configuration.
            # Details can be found at https://cloud.google.com/speech-to-text/docs/basics
            config = speech.RecognitionConfig(
                encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
                sample_rate_hertz=self.__sampleRate,
                language_code=self.__languageCode,
                audio_channel_count=1,
                model='command_and_search',  #
                speech_contexts=[speechContext],
            )
            # Create the Google API configuration
            self.__streamingConfig = speech.StreamingRecognitionConfig(config=config, interim_results=False)
        except:
            exType, exValue, exTraceback = sys.exc_info()
            self.__exceptionHook(exType, exValue, exTraceback)


    def __replaceText(self, text: str) -> str:
        """
        Replaces selected words defined in the "Replacements" columns of the "Settings" sheet of the workbook
        param: Word to be replaced if found in the list
        return: Replacement string

         Parameters
        ----------
        text : str
            Original text received from the Google Cloud text-to-speech API.

        Returns
        -------
        str :
            Text with replacements made
        """
        try:
            for key in self.__replacementDictionary:
                text = text.replace(key, self.__replacementDictionary[key])
        except:
            self.__callExcelMacro("pythonError", "textReplacementError")
        finally:
            return text

    def __timeDeltaToSeconds(self, tDelta: object) -> int:
        """
        Converts timedelta object to seconds

        Parameters
        ----------
        tDelta : timedelta object
            Object to be converted to seconds

        Returns
        -------
        str : int
            seconds tDelta converted to seconds
        """
        try:
            hms: List[str] = str(tDelta).split(':')
            h = hms[0]  # hours
            m = hms[1]  # minutes
            s = hms[2]  # seconds
            seconds = int(h) * 3600 + int(m) * 60 + int(s)
            return seconds
        except:
            exType, exValue, exTraceback = sys.exc_info()
            self.__exceptionHook(exType, exValue, exTraceback)

    def __callGoogleSpeech(self):
        """
        Calls the Google speech API with audio data collected by the Audio Engine Object. The recognized speech and
        time billed (in seconds) is entered into the __phraseQueue queue as a dictionary object.
        """

        if self.__recognitionActive:    # Check if speech recognition is turned on
            # First generate the request with audio data received from the Audio Generator
            requests = (
                speech.StreamingRecognizeRequest(audio_content=content)
                for content in self.__audioEngine.audioGenerator
            )
            # Call the Google Speech API to get a list of responses
            try:
                responses = self.__googleAPIClient.streaming_recognize(self.__streamingConfig, requests)
                if responses != None:
                    for response in responses:
                        if response != None:
                            # Check that the response contains results
                            if hasattr(response, 'results'):
                                if response.results != []:
                                    result = response.results[0]
                                    # Get first result
                                    textString = result.alternatives[0].transcript
                                    # Replace words with alternatives as defined on the "Settings" sheet of the workbook
                                    textString = self.__replaceText(textString)
                                    timeBilled = response.total_billed_time
                                    # Convert the TimeDelta object to seconds
                                    timeBilled = self.__timeDeltaToSeconds(timeBilled)
                                    phraseDictionary = {
                                        "textString": textString,
                                        "timeBilled": timeBilled
                                    }
                                    # Place the text and billed time in a Queue. This information will be sent to Excel by the "__sendTextToExcel" method
                                    self.__phraseQueue.put(phraseDictionary, block=True, timeout=0.1)
            except google.api_core.exceptions.OutOfRange:
                pass   # This exception can be ignored and sometimes occurs sporadically as the audio engine is paused or closed
            except:
                self.__callExcelMacro("pythonError", "speechRecognitionError")

    def __recognizeSpeech(self):
        """
            Keeps the thread in which speech recognition runs active
        """
        try:
            if self.__recognitionActive:    # Check is speech recognition is activated
                if self.__thread == None:
                    self.__thread = threading.Thread(target=self.__callGoogleSpeech, daemon=True)
                    self.__thread.start()
                else:
                    if not self.__thread.is_alive():    # Restart the thread if it has completed
                        self.__thread = threading.Thread(target=self.__callGoogleSpeech)
                        self.__thread.start()
        except:
            self.__callExcelMacro("pythonError", "speechRecognitionError")

    def __sendTextToExcel(self):
        """
            Sends the recognised speech and time billed to Excel.
        """
        try:
            if self.__recognitionActive:                # Check if speechrecognition is activated
                if not self.__phraseQueue.empty():      # Check if there are messages in the queue
                    phraseDictionary = self.__phraseQueue.get()
                    text = phraseDictionary["textString"]
                    timeBilled = phraseDictionary["timeBilled"]     # Send to Excel by calling the Excel "receiveText" macro
                    self.__callExcelMacro('receiveText', text, timeBilled)
        except:
            exType, exValue, exTraceback = sys.exc_info()
            self.__exceptionHook(exType, exValue, exTraceback)

    def runSpeechRecognition(self):
        """
            Must be called periodically to run the speech recognition engine
        """
        try:
            self.__recognizeSpeech()
            self.__sendTextToExcel()
        except:
            self.__callExcelMacro("pythonError", "speechRecognitionError")

    def pause(self):
        """
            Pauses speech recognition
        """
        try:
            self.__recognitionActive = False
        except:
            exType, exValue, exTraceback = sys.exc_info()
            self.__exceptionHook(exType, exValue, exTraceback)


    def resume(self):
        """
            Resumes speech recognition
        """
        try:
            self.__recognitionActive = True
        except:
            exType, exValue, exTraceback = sys.exc_info()
            self.__exceptionHook(exType, exValue, exTraceback)

    def __del__(self):
        pass
